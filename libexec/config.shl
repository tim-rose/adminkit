#
# CONFIG.SHL --Shell Library for processing config files.
#
# Contents:
# config_path()     --Resolve the configuration file using CONFIGPATH.
# config_filter()   --Filter config lines into simple shell assignments.
# config_sections() --Output a list of the config file's sections.
# config_section()  --Extract the definitions in a particular section of config.
# load_config()     --Load config definitions for section from a file.
#
# Remarks:
# This library contains routines for processing classic/common "INI" style
# config files.  The low-level routines filter sections and adapt INI's
# looser syntax into something that the shell will accept, so that the
# lines can be eval'd, and interned into real shell variables.
#
#
. core.shl 
require log.shl

CONFIGPATH=${CONFIGPATH:-.:$HOME:/usr/local/etc:/etc}

#
# config_path() --Resolve the configuration file using CONFIGPATH.
#
config_path()
{
    resolve_path ${CONFIGPATH} "$1"
}

#
# config_filter() --Filter config lines into simple shell assignments.
#
# Parameters:
# prefix	--specifies a prefix to apply to each variable
#
# Output:
# Shell assignment statements (I hope!)
#
# Remarks:
# This is the low-level routine for munging INI into a more
# shell-compatible syntax:
#  * strip comments, leading/trailing space characters
#  * delete empty lines
#  * strip space characters around the '='
#  * wrap values containing ' ' with quotes, if not already done
#
config_filter()
{
    local prefix=$1

    sed -e 's/#.*//' \
	-e '/^[ 	]*$/d' \
	-e "s/^[ 	]*/$prefix/" \
	-e 's/[ 	]*$//' \
	-e 's/[ 	]*=[ 	]*/=/' \
	-e "/=[^'\"].*[ 	]/s/=\(.*\)/='\1'/" # assignment cleanups
}

#
# config_sections() --Output a list of the config file's sections.
#
config_sections()
{
    local path=$(config_path "$1") || return 1
    sed -n -e '/\[default\]/d' \
	-e '/^[[][^][]*[]]$/s/^[[]\([^][]*\)[]]/\1/p' <$path
}


#
# config_section() --Extract the definitions in a particular section of config.
#
# Parameters:
# file		--specifies the configuration file
# section	--specifies the section to load
# prefix	--specifies a prefix to apply to all definitions (optional)
#
# Remarks:
# This routine simply prints the chunk of config-file lines for the
# specified section, with some attempt at making the definitions
# conform to shell syntax.
#
config_section()
{
    local file=$1 section=$2 prefix=$3

    local path=$(config_path "$file") || return 1

    debug 'config_section: %s[%s], prefix="%s")' $path $section $prefix
    sed -ne "/^[[]$2[]]\$/,\$p" <$path | # start of section
        sed -e 1d -e '/^[[]/,$d' | 	  # end of section
	config_filter $prefix
}

#
# load_config() --Load config definitions for section from a file.
#
# Parameters:
# file		--specifies the configuration file
# section	--specifies the configuration section
#
# Remarks:
# This is the main entrypoint for loading configuration settings.  It
# loads default values from a '[default]' section (if any), followed
# by the requested section.
#
load_config()
{
    local file=$1 section=$2 prefix=$3

    eval $(config_section "$file" default "$prefix")
    eval $(config_section "$@")
}
